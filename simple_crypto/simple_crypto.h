#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <unistd.h>

// alphaNumeric is constant chararacter array which contains the set of number(0-9),uppercase(A-Z) and lowercase(a-z) letters
// alphaNumeric used during the process of Caesar's encryption and decryption.
// It was used to avoid the "jumps" between the ASCII code of numbers,uppercase and lowercase letters
extern const char alphaNumeric[];


// One-time pad

/**
 * This function is responsible to generate the random secret key which will be used during one_time_pad's encryption/decryption process
 * The length of random secret key which is created,it is equal to length of user's input
 * @param userInput : The plaintext which will be encrypted
 * @return Random secret key
 */
char* one_time_pad_generateRandomSecretKey(char *userInput);

/**
 * This function is responsible for one_time_pad's encryption.
 * In case that are created non-printable characters during XOR-ing, they replace with hashtag(#).
 * Internally on this function is printed the encrypted text on printable format(with hashtags) , but is returned the "correct" form of encrypted text that's the encrypted text without the hashtags
 * @param userInput : The plaintext which will be encrypted
 * @param randomSecretKey : Random secret key which was generated by one_time_pad_generateRandomSecretKey function
 * @return  Encrypted text
 */
char* one_time_pad_encrypting(char *userInput,char *randomSecretKey);

/**
 * This function is responsible for one_time_pad's decryption
 * The parameter userInputLength is used because it can be generated during the XOR-ing the character backslash before the end of encryptedText
 * @param encryptedText : Encrypted text which was generated using one_time_pad_encrypting function
 * @param randomSecretKey : Random secret key which was generated by one_time_pad_generateRandomSecretKey function
 * @param userInputLength : The length of user's input
 * @return  Decrypted text a.k.a user input
 */
char* one_time_pad_decrypting(char *encryptedText,char *randomSecretKey,int userInputLength);


// Caesar's cipher

/**
 * This function is responsible for Caesar's encryption
 * @param userInput : The plaintext which will be encrypted
 * @param key : Fixed number of positions down the ASCII set(a.k.a shifted positions)
 * @return  Encrypted text
 */
char* caesar_encrypting(char *userInput,int key);

/**
 * This function is responsible for Caesar's decryption
 * @param encryptedText : Encrypted text which was generated using caesar_encrypting function
 * @param key  : Fixed number of positions down the ASCII set(a.k.a shifted positions)
 * @return  Decrypted text a.k.a user input
 */
char* caesar_decrypting(char *encryptedText,int key);


// Vigenere's cipher

/**
 * This function is responsible to generate the key phrase which will be used during Vigenere's encryption/decryption process
 * The length of key phrase must be the same with the user's input length
 * @param userInputLength : The length of plaintext which will be encrypted
 * @param key : The key which will be used to generate the key phrase.
 * @return Key phrase
 */
char* vigenere_generate_key_phrase(int userInputLength,char* key);

/**
 * This function is responsible for Vigenere's encryption
 * @param userInput : The plaintext which will be encrypted
 * @param keyphrase : Key phrase which was generated by vigenere_generate_key_phrase function
 * @return Encrypted text
 */
char* vigenere_encrypting(char *userInput,char* keyphrase);

/**
 * This function is responsible for Vigenere's decryption
 * @param encryptedText : Encrypted text which was generated using vigenere_encrypting function
 * @param keyphrase  : Key phrase which was generated by vigenere_generate_key_phrase function
 * @return  Decrypted text a.k.a user input
 */
char* vigenere_decrypting(char *encryptedText,char* keyphrase);